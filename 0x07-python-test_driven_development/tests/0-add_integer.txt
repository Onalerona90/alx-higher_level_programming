The ``add_integer`` module
======================

Using ``add_integer()``
-------------------

First import
>>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(6, 4)
    10

	>>> add_integer(5, 3.0) #doctest: +REPORT_NDIFF
	8

	>>> add_integer(3.0, 9)
	12

    >>> add_integer(2)
    100

    >>> add_integer(5, -2)
    3

    >>> add_integer(-2, 6)
    4

    >>> add_integer(2, True)
    3

    >>> add_integer(True, 2)
    3

    >>> add_integer(False, True)
    1

    >>> add_integer(True, True)
    2

    >>> add_integer(True)
    99

    >>> add_integer(3, False)
    3

    >>> add_integer(False, 3)
    3

    >>> add_integer(True, False)
    1

    >>> add_integer(False, False)
    0

    >>> add_integer(False)
    98

    >>> add_integer(1.1, 2.0) #doctest: +REPORT_NDIFF
    3

    >>> add_integer(1.5, 2.0) #doctest: +REPORT_NDIFF
    3

    >>> add_integer(1.5, 7.2) #doctest: +REPORT_NDIFF
    8

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(6, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

	>>> add_integer('a', 7)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer((), 7)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer({}, 7)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

    >>> add_integer([], 7)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

	>>> add_integer(7, '1')
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

	>>> add_integer(8, ())
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

	>>> add_integer(8, {})
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

    >>> add_integer(7, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer((3, 4))
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(float("nan"), 4)
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(1, float('inf')), add_integer(1, float('-inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('inf'), 1), add_integer(float('-inf'), 1)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

	>>> add_integer(3, 5, 6) #doctest: +ELLIPSIS
	Traceback (most recent call last):
		...
	TypeError: add_integer() takes from 1 to 2 positional arguments but ...

    >>> add_integer(, 3)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    >>> add_integer(,)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    >>> add_integer(/)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    >>> add_integer(b) #doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    NameError: name ... is not defined

    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
